name: CI

on:
  pull_request:
    branches: ["main"]
    paths:
      - ".github/workflows/ci.yml"
      - "shellx.sh"
      - "lib/**"
      - "plugins/**"
      - "tests/**"

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Run ShellCheck
        uses: azohra/shell-linter@latest
        with:
          path: "shellx.sh,lib/core/*.sh,lib/shellx/*.sh,plugins/*.sh"
          exclude-paths: "plugin-examples,hack"

  version-check:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check if version has to be changed
        id: version-check
        shell: bash
        run: |
          git diff-index --name-only --diff-filter=d origin/main | grep -q -i "^lib\/" && echo "lib folder has changes"
          git diff-index --name-only --diff-filter=d origin/main | grep -q "^plugins\/" && echo "plugins folder has changes"
          git diff-index --name-only --diff-filter=d origin/main | grep -q "^shellx.sh" && echo "shellx.sh has changes"
          
          if git diff-index --name-only --diff-filter=d origin/main | grep -q -i "^lib\/" || \
            git diff-index --name-only --diff-filter=d origin/main | grep -q "^plugins\/" || \
            git diff-index --name-only --diff-filter=d origin/main | grep -q "^shellx.sh"; then
            echo "version has to change"
            if git diff-index --name-only --diff-filter=d origin/main | grep -q "version.txt"; then
              echo "version.txt file has been modified"
            else
              echo "ERROR: version.txt file has not been modified, probably you should update it"
              exit 1
            fi
          fi

      - id: get-version
        run: echo "::set-output name=version::$(cat version.txt)"

      - id: semver
        uses: matt-usurp/validate-semver@v1
        with:
          version: ${{ steps.get-version.outputs.version }}
      
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Setup BATS
        uses: mig4/setup-bats@v1
        with:
          bats-version: 1.9.0

      - name: Checkout code
        uses: actions/checkout@v3
        with:
          submodules: recursive

      - name: Unit Tests
        run: |
          mkdir -p reports
          bats --timing --report-formatter junit tests/*.bats --output reports

      - name: Test Report
        uses: dorny/test-reporter@v1
        if: success() || failure()    # run this step even if previous step failed
        with:
          name: Unit Tests            # Name of the check run which will be created
          path: reports/*.xml         # Path to test results
          reporter: java-junit             # Format of test results

      - name: Test ShellX bootstrap
        env:
          SHELLX_DEBUG: yes
          SHELLX_HOME: ${{ github.workspace }}
        run: source shellx.sh

      - name: e2e ShellX cli
        env:
          SHELLX_DEBUG: yes
          SHELLX_HOME: ${{ github.workspace }}
        run: |
          # https://github.com/actions/toolkit/issues/766
          echo "Enabling aliases definition"
          shopt -s expand_aliases

          echo "Bootstrapping shellx"
          source shellx.sh

          echo "Checking shellx version command"
          shellx version

          echo "Checking shellx info command"
          shellx info
